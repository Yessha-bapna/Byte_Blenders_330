# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Virtual environment
venv/
env/
.venv/
ENV/

# VSCode settings
.vscode/

# macOS & Windows
.DS_Store
Thumbs.db

# Python cache
*.log
*.pot
*.pyc
*.pyo
*.pyd
*.sqlite3

# Streamlit generated files
.streamlit/config.toml
.streamlit/credentials.toml

# Model & HuggingFace cache
*.ckpt
*.bin
*.h5
*.pt
*.onnx
*.joblib
*.pkl
*.safetensors
*.tflite
.cache/
huggingface/

# Jupyter Notebook checkpoints
.ipynb_checkpoints

# Uploaded PDFs or temporary files
uploads/
*.pdf
*.json
*.csv

# System files
desktop.ini

# Compiled C/C++ or Rust files
*.so
*.dylib
*.dll
*.o
*.out

# PyCharm
.idea/

# Test & coverage
htmlcov/
.tox/
.nox/
.coverage
coverage.xml
*.cover
*.py,cover
.cache

# build tools
dist/
build/
*.egg-info/
.eggs/





# app.py

import streamlit as st
import requests
import json
from io import BytesIO


st.set_page_config(page_title="HackRx Policy QA", layout="wide")

st.title("üìÑüí¨ Intelligent Policy Document Q&A (HackRx)")
st.write("Ask questions from your uploaded insurance PDFs and get accurate, clause-level answers.")

# --- Upload PDF Section ---
st.subheader("1Ô∏è‚É£ Upload a Policy Document")

uploaded_file = st.file_uploader("Upload a .pdf policy document", type="pdf")

if uploaded_file is not None:
    with st.spinner("Uploading and indexing document..."):
        res = requests.post("http://localhost:8000/upload", files={"file": uploaded_file})
        if res.status_code == 200:
            session_id = res.json().get("session_id")
            st.success("Uploaded successfully!")
            st.session_state["session_id"] = session_id
        else:
            st.error("Upload failed.")

# --- Ask Question Section ---
if "session_id" in st.session_state:
    st.subheader("2Ô∏è‚É£ Ask a Question")
    question = st.text_input("Type your question here")

    if st.button("Ask"):
        with st.spinner("Thinking..."):
            payload = {
                "session_id": st.session_state["session_id"],
                "question": question
            }
            res = requests.post("http://localhost:8000/ask_uploaded", json=payload)
            if res.status_code == 200:
                response = res.json()
                st.markdown(f"### ‚úÖ Answer: {response.get('answer')}")
                st.markdown("**Matched Clause:**")
                st.code(response.get("matched_clause")[:500])
                st.markdown(f"**Document:** {response.get('document')}")

                # --- DOWNLOAD JSON BUTTON ---
                data = {
                    "question": question,
                    "answer": response.get("answer"),
                    "matched_clause": response.get("matched_clause"),
                    "document": response.get("document")
                }
                json_bytes = json.dumps(data, indent=4).encode()
                buffer = BytesIO(json_bytes)

                st.download_button(
                    label="üì• Download Response as JSON",
                    data=buffer,
                    file_name="qa_response.json",
                    mime="application/json"
                )

            else:
                st.error("Something went wrong. Please check backend logs.")
